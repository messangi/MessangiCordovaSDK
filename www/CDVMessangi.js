//var exec = require('cordova/exec');

/**
 * Message object generated and returned internally by SDK
 * @constructor
 * @param  {string} id - message unique identifier
 * @param  {string} blastId - blast identifier where message is sent
 * @param  {string} type - Message type
 * @param  {string} from - Message sender
 * @param  {string} to - Message recipient
 * @param  {string} subject - Title for the message
 * @param  {string} text - HTML text of message sent
 * @param  {string} status - Current status code of the message
 * @param  {string} statusDescription - Status description of the current message
 * @param  {string} encoding - Encoding used in the text of the message
 * @param  {string} date - Date of creation of the message
 * @param  {string} timezone - Timezone set in backend where message was generated
 * @param  {string} clientId - Workspace internal identifier used to send push
 * @param  {string} appName - Application name to which message was sent 
 * @param  {string} platform - Platform to which push was sent, can be ANDROID or IOS
 */
function Message(id, blastId, type, from, to, subject, text, status, statusDescription, encoding, date, timezone, clientId, appName, platform){

}


/**
 * Location object generated by device operanting system
 * @constructor
 * @param  {number} latitude - Latitude, in degrees
 * @param  {number} longitude - Longitude, in degrees
 * @param  {string} provider - Name of the provider that generated this fix
 * @param  {number} [time] - UTC time of this fix, in milliseconds since January 1, 1970
 * @param  {string} [timestamp] - The time at which this location was determined
 * @param  {number} [accuracy] - Get the estimated accuracy of this location, in meters
 * @param  {number} [horizontalAccuracy] - The accuracy of horizontal coordinates of location, measured in meters
 * @param  {number} [verticalAccuracy] - The accuracy of altitude of location, measured in meters
 * @param  {number} [altitude] - The altitude, if available, in meters above the WGS 84 reference ellipsoid. 
 * @param  {number} [bearing] - Horizontal direction of travel of this device, not related to the device orientation. It is guaranteed to be in the range (0.0, 360.0] if the device has a bearing
 * @param  {number} [speed] - Speed, if available, in meters per second over the ground
 * @param  {number} [course] - The direction in which device is traveling
 */
function Location(latitude, longitude, provider, time, accuracy, horizontalAccuracy, verticalAccuracy, altitude, bearing, speed, course){

}
/**
 * Workspace object generated by SDK
 * @constructor
 * @param  {string} name - Workspace name
 * @param  {string} clientId - Workspace identifier
 * @param  {boolean} subscribed - true if user is subscribed, false otherwise
 */
function Workspace(name, clientId, subscribed){

}  

/**
 * Geofence object generated by SDK
 * @constructor
 * @param  {string} regionId - Region identifier
 * @param  {string} geoFenceId - Geofence identifier
 * @param  {string} name - Name assigned in platform at the creation moment or last udpate
 * @param  {string} type - Geofence type
 * @param  {string} eventType - Event type which triggers the event
 * @param  {string} msgTitle - Notification title 
 * @param  {string} msgContent - Notification content
 * @param  {string} appName - Application name to which message was sent
 * @param  {string} timezone - Timezone set in backend where message was generated
 * @param  {string} update - Last time update of geofence
 * @param  {boolean} activated - true if geofence is active, false otherwise
 * @param  {string} clientId - Workspace internal identifier which generates the event
 * @param  {number} latitude - Latitude, in degrees
 * @param  {number} longitude - Longitude, in degrees.
 * @param  {number} radius - Radio length of geofence in meters
 */
function Geofence(regionId, geoFenceId, name, type, eventType, msgTitle, msgContent, appName, timezone, update, activated, clientId, latitude, longitude, radius){

}

/**
 * Beacon object generated by SDK
 * @constructor
 * @param  {string} regionId - Region identifier
 * @param  {string} name - Name assigned by platform in the moment of creation or last update
 * @param  {string} type - Beacon type
 * @param  {string} eventType - Type of event that triggers detection
 * @param  {string} msgTitle - Notification title
 * @param  {string} msgContent - Notification content
 * @param  {string} appName - Application name to which push was sent 
 * @param  {string} timezone - Timezone set in backend where message was generated
 * @param  {string} update - Last update date of beacon
 * @param  {boolean} activated - true if beacon is activated, false otherwise
 * @param  {string} clientId -  Workspace internal identifier which generates the event
 * @param  {string} uuid - Beacon identifier (non-unique, multiple beacons can share same uuid)
 * @param  {string} manufacturer - Beacon's manufacturer name
 * @param  {number} major - Major number, identifies beacon together with uuid and minor
 * @param  {number} minor - Minor number, identifies beacon together with uuid and major
 * @param  {string} distanceString - Distance in which event, enter or exit is generated
 */
function Beacon(regionId, name, type, eventType, msgTitle, msgContent, appName, timezone, update, activated, clientId, uuid, manufacturer, major, minor, distanceString){

}

/**
 * @constructor
 */
function Messangi() {
  this.setDefaultWorkspace = function (callback) {
    function successfull(workspace){
      console.log(workspace);
      this.dWorkspace = workspace;
      callback();
    }

    function fail (message) {
      callback(message);
    }
    
    if(this.dWorkspace && this.dWorkspace.clientID){
      callback();
    }else{
      this.getDefaultWorkspace(successfull, fail);
    }
  }
}

/**
 * Initializes MessangiSDK plugin 
 * @param  {initCallback} success - If initialization finishes corectly
 * @param  {errorCallback} error - If any error happens in the initialization process
 * @return {void}
 */
Messangi.prototype.init = function(success, error){
  cordova.exec(success, error, "CDVMessangi", "init",[]);
};

/**
 * Verifies if user is registered
 * @param  {function} success - If validation is correct
 * @param  {errorCallback} error - if any error happens calling this method
 * @return {void}
 */
Messangi.prototype.validUser = function(success,error){
  cordova.exec(success, error,"CDVMessangi","validUser",[])
};

/**
 * Get the User ID registered in Messangi 
 * @param  {getUserIDCallback} success - Method to invoke if user is successfully registered with phoneNumber as parameter
 * @param  {getUserIDErrorCallback} error - Method to invoke if user is not yet register
 * @return {void}
 */
Messangi.prototype.getUserID = function(success,error){
  cordova.exec(success, error,"CDVMessangi","getPhone",[]);
};

/**
 * Set the callback for the Push Received event
 * @param  {onPushReceivedCallback} success - Method to invoke if a push notification arrives
 * @param  {errorCallback} error - Method to invoke in case of error
 * @return {void}
 */
Messangi.prototype.onPushReceived = function(success,error){
  cordova.exec(success, error,"CDVMessangi","pushCallback",[]);
};

/**
 * Set the callback for Location Update event
 * @param  {onLocationUpdateCallback} success - Method to invoke when a location update event is fired
 * @param  {errorCallback} error - Method to invoke in case of error
 * @return {void}
 */
Messangi.prototype.onLocationUpdate = function(success,error){
  cordova.exec(success, error,"CDVMessangi","locationCallback",[]);
};

/**
 * Get Current Location
 * @param  {getCurrentLocationCallback} success - Method to invoke when a location update event is fired
 * @param  {errorCallback} error - Method to invoke in case of error
 * @return {void}
 */
Messangi.prototype.getCurrentLocation = function(success, error){
  cordova.exec(success, error, 'CDVMessangi', 'getCurrentLocation', []);
}

/**
 * Show auto registration dialog
 * @param  {registerCallback} success - Method callback if registration is successful
 * @param  {errorCallback} error - Method callback if some error has occurred
 * @param {string} [token] - If phone number is not provided by prompt directly
 */
Messangi.prototype.register = function(success, error, token) {
  cordova.exec(success, error, "CDVMessangi", "register", [token]);
}

/**
 * Register the User with Token in Messangi Backend
 * @param  {registerWithTokenCallback} success - Method callback if registration is successful
 * @param  {errorCallback} error - Method callback if some error has occurred
 * @param {string} [token] - If phone number is not provided by prompt directly
 */
Messangi.prototype.registerWithToken = function(success, error, token) {
  cordova.exec(success, error, "CDVMessangi", "register", [token]);
}

/**
 * First Step in custom registration process, sends phone number to Messangi Server
 * @param  {registerWithPhoneCallback} success - Method to invoke if phone user is successfully sent to Messangi Server
 * @param  {errorCallback} error - Method to invoke if some error has occurred
 * @param  {string} phone - Phone number to register
 * @return {void}
 */
Messangi.prototype.registerWithPhone = function(success, error, phone) {
  cordova.exec(success, error, "CDVMessangi", "sendPhoneNumber", [phone]);
};

/**
 * Second step in custom registration process, sends validation code arrived from SMS to Messangi to validate user registration
 * @param  {activatePhoneWithCodeCallback} success - Invoke if code validation is successfully sent to Messangi.
 * @param  {errorCallback} error - Method to invoke if some error has occurred
 * @param  {string} code - The code number arrived in SMS
 * @return {void}
 */
Messangi.prototype.activatePhoneWithCode = function(success, error, code){
  cordova.exec(success, error, "CDVMessangi", "sendValidationCode", [code]);
};

/**
 * Lists all Workspaces available to join
 * @param  {getAvailableWorkspacesCallback} success - Method to invoke in successful execution
 * @param  {errorCallback} error - Method to invoke if some error has occurred
 * @return {void}
 */
Messangi.prototype.getAvailableWorkspaces = function(success, error){
  cordova.exec(success, error, "CDVMessangi", "getAvailableWorkspaces", []);
};

/**
 * Lists all Workspaces subscribed by the user
 * @param  {getSubscribedWorkspacesCallback} success - Method to invoke in successful execution
 * @param  {errorCallback} error - Method to invoke if some error has occurred
 * @return {void}
 */
Messangi.prototype.getSubscribedWorkspaces = function(success, error){
  cordova.exec(success, error, "CDVMessangi", "getSubscribedWorkspaces", []);
};

/**
 * Gets Default Workspace
 * @param  {getDefaultWorkspaceCallback} success - Method to invoke in successful execution
 * @param  {errorCallback} error - Method to invoke if some error has occurred
 * @return {void}
 */
Messangi.prototype.getDefaultWorkspace = function(success, error){
  cordova.exec(success, error, "CDVMessangi", "getDefaultWorkspace", []);
};

/**
 * Gets a Workspace using ClientID
 * @param {getWorkspaceCallback} success - Method to invoke in successful execution
 * @param {errorCallback} error - Method to invoke if some error is occurred
 * @param {string} clientId - The clientId of workspace to fetch
 * @return {void}
 */
Messangi.prototype.getWorkspace = function(success, error, clientId){
  cordova.exec(success, error, 'CDVMessangi', 'getWorkspace', [clientId]);
}

/**
 * Joins to new workspace and start receiving notifications from it
 * @param  {joinWorkspaceCallback} success - Method to invoke in successful execution  
 * @param  {errorCallback} error - Method to invoke if some error is occurred
 * @param  {string} clientId - clientId ID of workspace to subscribe
 * @return {void}
 */
Messangi.prototype.joinWorkspace = function(success, error, clientId){
  cordova.exec(success, error, "CDVMessangi", "joinWorkspace", [clientId]);
};

/**
 * Removes workspace subscription and stops receiving notifications from it
 * @param  {leaveWorkspaceCallback} success - Method to invoke in successful execution
 * @param  {errorCallback} error - Method to invoke if some error is occurred
 * @param  {string} clientId - clientId ID of the workspace to leave
 * @return {void}
 */
Messangi.prototype.leaveWorkspace = function(success, error, clientId){
  cordova.exec(success, error, "CDVMessangi", "leaveWorkspace", [clientId]);
};

/**
 * Sends a message from device to workspace 
 * @param  {sendMessageCallback} success - Method to invoke in successful execution
 * @param  {errorCallback} error - Method to invoke if some error is occurred
 * @param  {string} message - Text to send to Workspace
 * @param  {string} [clientId] - (Optional) Client ID of workspace to send a message. By default uses the Main Workspace
 * @return {void}
 */
Messangi.prototype.sendMessage = function(success, error, message, clientId){
  if(clientId !== null){
    cordova.exec(success, error, "CDVMessangi", "sendMessage", [clientId, message]);
  }else{
    this.setDefaultWorkspace(function(err){
      if(this.dWorkspace !== null){
        cordova.exec(success, error, "CDVMessangi", "sendMessage", [this.dWorkspace.clientID, message]);  
      }else{
        error(err || 'Error loading default Workspace');
      }
    });
  }
};

/**
 * Gets all received messages by MessangiSDK, filtering them by specific workspaces
 * @param  {listMessagesCallback} success - Method to invoke in successfully execution
 * @param  {errorCallback} error - Method to invoke if some error is occurred
 * @param  {string[]} [clientsIds] - Array with all clients' ids of workspace to retrieve.  By default uses the Main Workspace
 * @return {void}
 */
Messangi.prototype.listMessages = function(success, error, clientsIds){
  if(clientsIds !== null){
    cordova.exec(success, error, "CDVMessangi", "listMessages", clientsIds);
  }else{
    this.setDefaultWorkspace(function(err){
      if(this.dWorkspace !== null){
        cordova.exec(success, error, "CDVMessangi", "listMessages", [this.dWorkspace.clientID]);
      }else{
        error(err || 'Error loading default Workspace');
      }
    });
  }
};

/**
 * Gets all Geofences received by MessangiSDK, filtering them by specific workspaces
 * @param  {listGeofencesCallback} success - Method to invoke in successfully execution
 * @param  {errorCallback} error - Method to invoke if some error is occurred
 * @param  {string[]} [clientsIds] - Array with all clients ids of workspace to retrieve.  By default uses the Main Workspace
 * @return {void}
 */
Messangi.prototype.listGeofences = function(success, error, clientsIds){
  if(clientsIds !== null){
    cordova.exec(success, error, "CDVMessangi", "listGeofences", clientsIds);
  }else{
    this.setDefaultWorkspace(function(err){
      if(this.dWorkspace !== null){
        cordova.exec(success, error, "CDVMessangi", "listGeofences", [this.dWorkspace.clientID]);
      }else{
        error(err || 'Error loading default Workspace');
      }
    });
  }
};

/**
 * Gets all Beacons received by MessangiSDK, filtering them by specific workspaces
 * @param  {listBeaconCallback} success - Method to invoke in successfully execution
 * @param  {errorCallback} error - Method to invoke if some error is occurred
 * @param  {string} [type] - (Optional) string with the type of Beacon to retrieve; available types: "all", "bluetooth" or "wifi" 
 * @param  {string[]} [clientsIds] - (Optional) Array with all clients ids of workspace to retrieve.  By default uses the Main Workspace
 * @return {void}
 */
Messangi.prototype.listBeacons = function(success, error, type, clientsIds){
  var clone = clientsIds && clientsIds.slice(0) || [];
  clone.unshift(type || 'all');
  
  if(clone.length > 1){
    cordova.exec(success, error, "CDVMessangi", "listBeacons", clone);
  }else{
    this.setDefaultWorkspace(function(err){
      if(this.dWorkspace !== null){
        cordova.exec(success, error, "CDVMessangi", "listBeacons", [type || 'all' , this.dWorkspace.clientID]);
      }else{
        error(err || 'Error loading default Workspace');
      }
    });
  }
};

Messangi.install = function () {
  if (!window.plugins) {
    window.plugins = {};
  }

  window.plugins.Messangi = new Messangi();

  return window.plugins.Messangi;
};

cordova.addConstructor(Messangi.install);
